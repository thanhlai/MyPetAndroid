package com.meganet.mypetandroid;

import java.io.IOException;
import java.io.InputStream;

import com.meganet.mypetandroid.ShakeDetector.OnShakeListener;

import android.animation.AnimatorInflater;
import android.animation.AnimatorSet;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity implements SensorEventListener  {

	private int count = 0;
	private long startMillis = 0;
	
	String eggImg = "egg.png";
	ImageView petImageView;
	

	private static final float SHAKE_THRESHOLD_GRAVITY = 2.7F;
    private static final int SHAKE_SLOP_TIME_MS = 500;
    private static final int SHAKE_COUNT_RESET_TIME_MS = 3000;
 
    private OnShakeListener mListener;
    private long mShakeTimestamp;
    private int mShakeCount;
    
    public void setOnShakeListener(OnShakeListener listener) {
        this.mListener = listener;
    }
 
    public interface OnShakeListener {
        public void onShake(int count);
    }
 
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		setup();

		AnimatorSet eggSet = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.egg_spin);
		eggSet.setTarget(petImageView);
		eggSet.start();
		
		petImageView.setOnTouchListener(new OnTouchListener() {	
			@SuppressLint("ClickableViewAccessibility") @Override
			public boolean onTouch(View v, MotionEvent event) {
				int eventaction = event.getAction();
				if (eventaction == MotionEvent.ACTION_UP) {

					// get system current milliseconds
					long time = System.currentTimeMillis();

					// if it is the first time, or if it has been more than 3 seconds
					// since the first tap ( so it is like a new try), we reset
					// everything
					if (startMillis == 0 || (time - startMillis > 3000)) {
						startMillis = time;
						count = 1;
					}
					// it is not the first, and it has been less than 3 seconds since
					// the first
					else { // time-startMillis< 3000
						count++;
					}
					if (count == 5) {
						Toast.makeText(v.getContext(), "You touch me so fast laaa", Toast.LENGTH_LONG).show();		
					}
				}
				
				/*Swipe effect*/
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					Toast.makeText(v.getContext(), "Action down,..."+ event.getX(),Toast.LENGTH_LONG).show();
					break;
				case MotionEvent.ACTION_MOVE:
					
					break;
				case MotionEvent.ACTION_UP:
					Toast.makeText(v.getContext(), "Action up,..."+ event.getY(),Toast.LENGTH_LONG).show();
					break;
				default:
					return false;
				}				
				v.invalidate();
				/*End swipe effect*/
				return true;
			}
		});
	}

	private void setup() {
		petImageView = (ImageView) findViewById(R.id.petImageViewId);
		petImageView.setImageBitmap(getBitmapFromAsset(eggImg));	
	}

	// Helper
	private Bitmap getBitmapFromAsset(String fileName) {
		AssetManager assetManager = getAssets();
		InputStream istr = null;
		try {
			istr = assetManager.open(fileName);
		} catch (IOException e) {
			e.printStackTrace();
		}
		Bitmap bitmap = BitmapFactory.decodeStream(istr);
		return bitmap;
	}

	public void poopButtonClick(View v) {
		Toast.makeText(v.getContext(), "Poop -1", Toast.LENGTH_LONG).show();
	}

	public void loveButtonClick(View v) {
		Toast.makeText(v.getContext(), "Heart +1", Toast.LENGTH_LONG).show();
	}
	
	public void eatButtonClick(View v) {
		Toast.makeText(v.getContext(), "Eat +1", Toast.LENGTH_LONG).show();
	}
	
	public void skillButtonClick(View v) {
		Toast.makeText(v.getContext(), "Skill +1", Toast.LENGTH_LONG).show();
	}
	
	public void healButtonClick(View v) {
		Toast.makeText(v.getContext(), "Heal +1", Toast.LENGTH_LONG).show();
	}
	
	public void sleepButtonClick(View v) {
		Toast.makeText(v.getContext(), "Turn off", Toast.LENGTH_LONG).show();
	}

	@Override
	public void onSensorChanged(SensorEvent event) {
		if (mListener != null) {
            float x = event.values[0];
            float y = event.values[1];
            float z = event.values[2];
 
            float gX = x / SensorManager.GRAVITY_EARTH;
            float gY = y / SensorManager.GRAVITY_EARTH;
            float gZ = z / SensorManager.GRAVITY_EARTH;
 
            // gForce will be close to 1 when there is no movement.
            double gForce = Math.sqrt(gX * gX + gY * gY + gZ * gZ);
 
            if (gForce > SHAKE_THRESHOLD_GRAVITY) {
                final long now = System.currentTimeMillis();
                // ignore shake events too close to each other (500ms)
                if (mShakeTimestamp + SHAKE_SLOP_TIME_MS > now) {
                    return;
                }
 
                // reset the shake count after 3 seconds of no shakes
                if (mShakeTimestamp + SHAKE_COUNT_RESET_TIME_MS < now) {
                    mShakeCount = 0;
                }
 
                mShakeTimestamp = now;
                mShakeCount++;
 
                mListener.onShake(mShakeCount);
            }
        }
		
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {
		// no
	}

}
