package com.meganet.mypetandroid;

import java.io.IOException;
import java.io.InputStream;

import android.animation.AnimatorInflater;
import android.animation.AnimatorSet;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.ImageView;
import android.widget.Toast;

public class MainActivity extends Activity  {

	private int count = 0;
	private long startMillis = 0;
	
	String eggImg = "egg.png";
	ImageView petImageView;
	
	private SensorManager mSensorManager;
	private float mAccel; // acceleration apart from gravity
	private float mAccelCurrent; // current acceleration including gravity
	private float mAccelLast; // last acceleration including gravity
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		setup();

		AnimatorSet eggSet = (AnimatorSet) AnimatorInflater.loadAnimator(this, R.animator.egg_spin);
		eggSet.setTarget(petImageView);
		eggSet.start();
		
		petImageView.setOnTouchListener(new OnTouchListener() {	
			@SuppressLint("ClickableViewAccessibility") @Override
			public boolean onTouch(View v, MotionEvent event) {
				int eventaction = event.getAction();
				if (eventaction == MotionEvent.ACTION_UP) {

					// get system current milliseconds
					long time = System.currentTimeMillis();

					// if it is the first time, or if it has been more than 3 seconds
					// since the first tap ( so it is like a new try), we reset
					// everything
					if (startMillis == 0 || (time - startMillis > 3000)) {
						startMillis = time;
						count = 1;
					}
					// it is not the first, and it has been less than 3 seconds since
					// the first
					else { // time-startMillis< 3000
						count++;
					}
					if (count == 5) {
						Toast.makeText(v.getContext(), "You touch me so fast laaa", Toast.LENGTH_LONG).show();		
					}
				}
				
				/*Swipe effect*/
				switch (event.getAction()) {
				case MotionEvent.ACTION_DOWN:
					Toast.makeText(v.getContext(), "Action down,..."+ event.getX(),Toast.LENGTH_LONG).show();
					break;
				case MotionEvent.ACTION_MOVE:
					
					break;
				case MotionEvent.ACTION_UP:
					Toast.makeText(v.getContext(), "Action up,..."+ event.getY(),Toast.LENGTH_LONG).show();
					break;
				default:
					return false;
				}				
				v.invalidate();
				/*End swipe effect*/
				return true;
			}
		});
		
		// Shake
		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
	    mSensorManager.registerListener(mSensorListener, mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER), SensorManager.SENSOR_DELAY_NORMAL);
	    mAccel = 0.00f;
	    mAccelCurrent = SensorManager.GRAVITY_EARTH;
	    mAccelLast = SensorManager.GRAVITY_EARTH;
	    if (mAccel > 12) {
	        Toast toast = Toast.makeText(getApplicationContext(), "Device has shaken.", Toast.LENGTH_LONG);
	        toast.show();
	    }
	}

	private void setup() {
		petImageView = (ImageView) findViewById(R.id.petImageViewId);
		petImageView.setImageBitmap(getBitmapFromAsset(eggImg));	
	}

	// Helper
	private Bitmap getBitmapFromAsset(String fileName) {
		AssetManager assetManager = getAssets();
		InputStream istr = null;
		try {
			istr = assetManager.open(fileName);
		} catch (IOException e) {
			e.printStackTrace();
		}
		Bitmap bitmap = BitmapFactory.decodeStream(istr);
		return bitmap;
	}

	public void poopButtonClick(View v) {
		Toast.makeText(v.getContext(), "Poop -1", Toast.LENGTH_LONG).show();
	}

	public void loveButtonClick(View v) {
		Toast.makeText(v.getContext(), "Heart +1", Toast.LENGTH_LONG).show();
	}
	
	public void eatButtonClick(View v) {
		Toast.makeText(v.getContext(), "Eat +1", Toast.LENGTH_LONG).show();
	}
	
	public void skillButtonClick(View v) {
		Toast.makeText(v.getContext(), "Skill +1", Toast.LENGTH_LONG).show();
	}
	
	public void healButtonClick(View v) {
		Toast.makeText(v.getContext(), "Heal +1", Toast.LENGTH_LONG).show();
	}
	
	public void sleepButtonClick(View v) {
		Toast.makeText(v.getContext(), "Turn off", Toast.LENGTH_LONG).show();
	}

	private final SensorEventListener mSensorListener = new SensorEventListener() {

	    public void onSensorChanged(SensorEvent se) {
	      float x = se.values[0];
	      float y = se.values[1];
	      float z = se.values[2];
	      mAccelLast = mAccelCurrent;
	      mAccelCurrent = (float) Math.sqrt((double) (x*x + y*y + z*z));
	      float delta = mAccelCurrent - mAccelLast;
	      mAccel = mAccel * 0.9f + delta; // perform low-cut filter
	    }

	    public void onAccuracyChanged(Sensor sensor, int accuracy) {
	    }
	  };


}
